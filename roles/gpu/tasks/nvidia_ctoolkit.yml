---
- name: Check if NVIDIA runtime configuration file exists
  ansible.builtin.stat:
    path: "{{ cruntime_toml_path }}"
  register: nvidia_config_file

- name: Take the backup of the existing file
  ansible.builtin.copy:
    src: "{{ cruntime_toml_path }}"
    dest: "{{ cruntime_toml_path }}_bk"
    remote_src: yes

- name: Copy the container runtime config file
  ansible.builtin.copy:
    src: container-runtime-config.toml
    dest: "{{ cruntime_toml_path }}"

- name: Check if nvidia parameters are present in config.toml
  ansible.builtin.shell: |
    result1=$(grep -E "^accept-nvidia-visible-devices-as-volume-mounts = true" {{ cruntime_toml_path }} > /dev/null; echo $?)
    result2=$(grep -E "^accept-nvidia-visible-devices-envvar-when-unprivileged = false" {{ cruntime_toml_path }} > /dev/null; echo $?)
    echo "{\"volume_param\": $result1, \"envvar_param\": $result2}"
  register: nvidia_params_check
  changed_when: false

- name: Set facts about nvidia parameters
  ansible.builtin.set_fact:
    nvidia_volume_param_present: "{{ (nvidia_params_check.stdout | from_json).volume_param == 0 }}"
    nvidia_envvar_param_present: "{{ (nvidia_params_check.stdout | from_json).envvar_param == 0 }}"

- name: Fail if nvidia parameters are missing
  ansible.builtin.fail:
    msg: >
      Missing required NVIDIA parameters in {{ cruntime_toml_path }}:
      {% if not nvidia_volume_param_present %}
      - accept-nvidia-visible-devices-as-volume-mounts = true
      {% endif %}
      {% if not nvidia_envvar_param_present %}
      - accept-nvidia-visible-devices-envvar-when-unprivileged = false
      {% endif %}
  when: not (nvidia_volume_param_present and nvidia_envvar_param_present)
