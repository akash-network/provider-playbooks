---
- name: Split NVIDIA version into components
  ansible.builtin.set_fact:
    nvidia_base_version: "{{ nvidia_version | regex_replace('^([0-9]+)\\.([0-9]+)\\.([0-9]+)$', '\\1.\\2') }}"
    nvidia_major_version: "{{ nvidia_version | regex_replace('^([0-9]+)\\.([0-9]+)\\.([0-9]+)$', '\\1') }}"
    nvidia_minor_version: "{{ nvidia_version | regex_replace('^([0-9]+)\\.([0-9]+)\\.([0-9]+)$', '\\2') }}"
    nvidia_patch_version: "{{ nvidia_version | regex_replace('^([0-9]+)\\.([0-9]+)\\.([0-9]+)$', '\\3') }}"

- name: Check if nvidia-smi is already installed
  ansible.builtin.shell: nvidia-smi --query-gpu=driver_version --format=csv,noheader | head -n1
  register: nvidia_driver_check
  changed_when: false
  failed_when: false

- name: Set fact for current driver version
  ansible.builtin.set_fact:
    current_driver_version: "{{ nvidia_driver_check.stdout | default('') }}"

- name: Check if nvidia-container-toolkit is installed (Debian/Ubuntu)
  ansible.builtin.command: dpkg -l nvidia-container-toolkit
  register: toolkit_check
  changed_when: false
  failed_when: false

- name: Check if nvidia-container-runtime is installed (Debian/Ubuntu)
  ansible.builtin.command: dpkg -l nvidia-container-runtime
  register: runtime_check
  changed_when: false
  failed_when: false

- name: Check if nvidia-container-toolkit/runtime is already at the required version
  ansible.builtin.debug:
    msg:
      - "nvidia-container-toolkit installed: {{ toolkit_check.rc == 0 }}"
      - "nvidia-container-runtime installed: {{ runtime_check.rc == 0 }}"

- name: Install NVIDIA Container Toolkit and Runtime
  ansible.builtin.apt:
    name:
      - nvidia-container-toolkit
      - nvidia-container-runtime
    state: present
    update_cache: yes
  when: (toolkit_check.rc != 0 or runtime_check.rc != 0)


- name: Remove existing NVIDIA repository files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/nvidia-container-toolkit.list
    - /etc/apt/sources.list.d/libnvidia-container.list
    - /etc/apt/sources.list.d/cuda-repo.list

- name: Add NVIDIA repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /"
    state: present
    filename: nvidia-container-toolkit
    update_cache: yes

- name: Check if driver is already at the required version
  ansible.builtin.debug:
    msg: "NVIDIA driver is already at version {{ current_driver_version }}. No action required."
  when: current_driver_version == nvidia_version

- name: Add NVIDIA GPG key
  ansible.builtin.apt_key:
    url: https://nvidia.github.io/libnvidia-container/gpgkey
    state: present
    keyring: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg

- name: Download CUDA key
  ansible.builtin.get_url:
    url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub
    dest: /tmp/cuda-key.pub
    mode: '0644'

- name: Add CUDA key to keyring
  ansible.builtin.shell: |
    mkdir -p /usr/share/keyrings
    gpg --dearmor -o /usr/share/keyrings/cuda-keyring.gpg /tmp/cuda-key.pub
  args:
    creates: /usr/share/keyrings/cuda-keyring.gpg

- name: Add NVIDIA CUDA repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/cuda-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 /"
    state: present
    filename: cuda-repo
    update_cache: yes

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes

- name: Install NVIDIA driver

  ansible.builtin.apt:
    name: "nvidia-driver-{{ nvidia_major_version }}"
    state: present
    update_cache: yes
    dpkg_options: 'force-confdef,force-confold'
  environment:
    DEBIAN_FRONTEND: noninteractive

- name: Install NVIDIA CUDA toolkit
  ansible.builtin.apt:
    name: nvidia-cuda-toolkit
    state: present
    update_cache: yes

- name: Check if NVIDIA GPUs are PCIe
  ansible.builtin.shell: nvidia-smi -L
  register: nvidia_smi_output
  changed_when: false

- name: Fail if the Nvidia GPUs are not initialized
  ansible.builtin.set_fact: 
    has_passed: "{{ 'Failed to initialize' in nvidia_smi_output.stdout }}"

- name: Set fact for PCIe GPUs
  ansible.builtin.set_fact:
    has_pcie: "{{ 'PCIe' in nvidia_smi_output.stdout }}"  

- name: Install and configure NVIDIA Fabric Manager
  ansible.builtin.apt:
    name: "nvidia-fabricmanager-{{ nvidia_major_version }}"
    state: present
    update_cache: yes
  when: 
  - has_pcie is none
  - has_passed
  notify:
    - Configure NVIDIA Fabric Manager
