---
# Check if required op Connect variables are defined
- name: Sign in to op account
  ansible.builtin.shell: op signin --account {{ opconnect_account_name }}

- name: Display variables
  ansible.builtin.debug:
    msg: "provider: {{ provider_name }}, vault_name: {{ vault_name }}"

- name: Get the vault ID for Providers
  ansible.builtin.shell: op vault list --format=json | jq -r '.[] | select(.name=="{{ vault_name }}") | .id'
  register: vault_id_result
  changed_when: false

- name: Store the vault ID in a variable
  ansible.builtin.set_fact:
    vault_uuid: "{{ vault_id_result.stdout }}"

- name: Display the vault ID
  ansible.builtin.debug:
    msg: "The ID for the '{{ vault_name }}' vault is: {{ vault_uuid }}"
  when: vault_uuid | length > 0    

- name: Display message if vault not found
  ansible.builtin.debug:
    msg: "The vault '{{ vault_name }}' was not found"
  when: vault_uuid | length == 0

- name: Read b64-key & b64-key secret
  ansible.builtin.shell: op read "op://{{ vault_name }}/{{ provider_name }}/{{ item }}"
  register: b64_key_output
  changed_when: false
  with_items:
  - b64-key
  - b64-keysecret

- name: Store outputs in separate variables
  ansible.builtin.set_fact:
    provider_b64_key: "{{ b64_key_output.results[0].stdout | default('') }}"
    provider_b64_keysecret: "{{ b64_key_output.results[1].stdout | default('') }}"
  no_log: true

- name: Check if keys were retrieved successfully
  ansible.builtin.set_fact:
    b64_key_success: "{{ provider_b64_key | length > 0 }}"
    b64_keysecret_success: "{{ provider_b64_keysecret | length > 0 }}"

- name: Display first few characters of keys (using string slicing)
  ansible.builtin.debug:
    msg: 
      - "b64-key: {{ (provider_b64_key[:2] + '...') if b64_key_success else 'NOT RETRIEVED' }}"
      - "b64-keysecret: {{ (provider_b64_keysecret[:2] + '...') if b64_keysecret_success else 'NOT RETRIEVED' }}"